user www-data;

# Определяет количество рабочих процессов. Его лучше устанавливать в auto в новых версиях.
worker_processes auto;

pid /run/nginx.pid;

# Для контейнеров Docker (или для отладки) директива daemon off; указывает Nginx оставаться на
# переднем плане. Для контейнеров это полезно, поскольку наилучшая практика заключается в одном
# контейнере = один процесс. Один сервер (контейнер) имеет только одну услугу.
daemon off;

events {
    # Устанавливает максимальное количество соединений одного рабочего процесса. Следует выбирать значения от 1024 до 4096.
    worker_connections 2048;

    # Будет принимать максимально возможное количество соединений
    multi_accept on;

    # метод обработки соединения. epoll — эффективный метод, используемый в Linux 2.6+.
    use epoll;
}

http {
    # Разрешает или запрещает выдавать версию nginx’а на страницах ошибок и в поле “Server” заголовка ответа.
    server_tokens off;

    # Метод отправки данных sendfile более эффективен, чем стандартный метод read+write
    sendfile on;

    # Будет отправлять заголовки и начало файла в одном пакете
    tcp_nopush on;
    tcp_nodelay on;

    #--------------обработка клиентов-----------
    # Будет ждать 30 секунд перед закрытием keepalive соединения
    keepalive_timeout 30;
    # Максимальное количество keepalive запросов от одного клиента
    keepalive_requests 100;
    # Если клиент перестал читать отвечать, Nginx будет сбрасывать соединение с ним
    reset_timedout_connection on;
    # Будет ждать 10 секунд тело запроса от клиента, после чего сбросит соединение
    client_body_timeout 10;
    # Если клиент прекратит чтение ответа, Nginx подождет 2 секунды и сбросит соединение
    send_timeout 2;
    # В этом случае сервер не будет принимать запросы размером более 1000Мб
    client_max_body_size 1000M;


    include /etc/nginx/mime.types;
    default_type application/octet-stream;


    #----------логи---------------
    access_log off;
    # в лог будем писать только критические ошибки
    #error_log /var/log/nginx/error.log crit;
    error_log /var/log/nginx/error.log notice;


    #----------включаем сжатие трафика------------
    gzip on;
    # для старых браузеров сжатия не будет
    gzip_disable "msie6";
    # определяет MIME типы, для которых будет работать сжатие
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # степень сжатия (1 самый быстрый, но менее эффективен, 9 самый эффективный, но медленный, может нагружать процессор)
    gzip_comp_level 5;


    #---------кеширование------------

    # Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
    open_file_cache max=20000 inactive=20s;
    # Определяет через какое время информация будет удалена из кеша
    open_file_cache_valid 30s;
    # Будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
    open_file_cache_min_uses 2;
    # Будет кешировать информацию об отсутствующих файлах
    open_file_cache_errors on;


    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    charset UTF-8;

    server {
        listen 80;
        listen [::]:80;

        server_name localhost;

        index index.php index.html index.htm;

        root /var/www;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
        add_header Set-Cookie HttpOnly;
        add_header Cache-Control no-cache;
        add_header Expires -1;

        location / {
            try_files $uri $uri/ /index.php$is_args$args;
        }

        # rewrite ^/core/authorize.php/core/authorize.php(.*)$ /core/authorize.php$1;

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass php-fpm:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;

            # скрываем заголовок о версии php, которая используется на сервере
            fastcgi_hide_header X-Powered-By;
        }

        location ~ /\.ht {
            deny all;
        }

        location = /favicon.ico {
            log_not_found off; access_log off;
        }
        location = /robots.txt {
            log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
            expires max;
            log_not_found off;
        }
    }
}